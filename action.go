package sirius

// MessageAction is an action that can be performed on a message. Used for serializing the modifications
// generated by extensions while allowing them to execute in parallel.
type MessageAction interface {
	Perform(*Message) error
}

type EmptyAction struct{}

func NoAction() *EmptyAction {
	return &EmptyAction{}
}

func (*EmptyAction) Perform(*Message) error {
	return nil
}

// apply applies a single MessageAction to a message.
// Returns a bool indicating if the message text property was modified.
func (m *Message) apply(a MessageAction) (bool, error) {
	oldText := m.Text
	err := a.Perform(m)
	mod := m.Text != oldText

	return mod, err
}

// applyAll applies a series of MessageActions to a message.
// Returns a bool indicating if the message text property was modified.
func (m *Message) applyAll(act []MessageAction) (bool, error) {
	var modified bool
	for _, a := range act {
		mod, err := m.apply(a)
		if err != nil {
			return modified, err
		}

		modified = modified || mod
	}

	return modified, nil
}
